package moddedmite.rustedironcore.api.event;

import moddedmite.rustedironcore.api.event.handler.*;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.*;

public class Handlers {
    /**
     * Register valid block base and item activators
     */
    public static final BeaconUpdateHandler BeaconUpdate = new BeaconUpdateHandler();
    /**
     * Features of the biome. Registering here will affect the base method {@link BiomeDecorator#decorate()}.
     * <br>
     * If you want to add features for your special biome, just override {@link BiomeGenBase#decorate}.
     */
    public static final BiomeDecorationHandler BiomeDecoration = new BiomeDecorationHandler();
    public static final BiomeGenerateHandler BiomeGenerate = new BiomeGenerateHandler();
    /**
     * Modify max enchantment num and enchanting level
     */
    public static final EnchantingHandler Enchanting = new EnchantingHandler();
    /**
     * This mixin may conflict, if you want to write/read nbt for mobs, use this
     */
    public static final EntityMobMixinHandler EntityMobMixin = new EntityMobMixinHandler();
    /**
     * This handles the process of furnace working, and burn speed, expected time, etc.
     */
    public static final FurnaceUpdateHandler FurnaceUpdate = new FurnaceUpdateHandler();
    /**
     * This take over the loot of the gravel block.
     */
    public static final GravelDropHandler GravelDrop = new GravelDropHandler();
    /**
     * Events for server player log in or out. Also provides some extra info, like first login.
     */
    @Environment(EnvType.SERVER)
    public static final PlayerEventHandler PlayerEvent = new PlayerEventHandler();
    /**
     * Registering a new arrow is complex. This simplifies the process.
     */
    public static final ArrowRegisterHandler ArrowRegister = new ArrowRegisterHandler();
    /**
     * This is called after items and blocks are registered.
     */
    public static final AbstractHandler<Runnable> PropertiesRegistry = new AbstractHandler<>();
    /**
     * Realize special recipes.
     * <br>
     * You can also register common recipes, since it provides methods with different params.
     */
    public static final SmeltingHandler Smelting = new SmeltingHandler();
    /**
     * You should still register your spawn entry at each biome.
     * This only take over the spawn condition logic for compat: {@link WorldServer#getSuitableCreature}
     * <br>
     * If you want your monster to spawn without checking, just do not register.
     */
    public static final SpawnConditionHandler SpawnCondition = new SpawnConditionHandler();
    /**
     * This provides crafting registry with more arguments, and also provides armor fixing recipes, like silk fixing leather armor.
     */
    public static final CraftingHandler Crafting = new CraftingHandler();
    /**
     * Taking over the profession, texture, and trading recipes of villagers.
     */
    public static final TradingHandler Trading = new TradingHandler();
    /**
     * Some useful hooks for players combating with mobs.
     */
    public static final CombatHandler Combat = new CombatHandler();
    public static final TickHandler Tick = new TickHandler();
    /**
     * You can register loot for almost every structure and feature through this.
     */
    public static final LootTableHandler LootTable = new LootTableHandler();
    /**
     * Modify the player attributes like health, hunger, nutrition limit.
     */
    public static final PlayerAttributeHandler PlayerAttribute = new PlayerAttributeHandler();
    /**
     * This handles the {@link Packet23VehicleSpawn}.
     * Almost every non-living entity generated by the server will sync to the client through this packet, rather than the name "vehicle".
     */
    public static final EntityTrackerHandler EntityTracker = new EntityTrackerHandler();
    public static final TimedTaskHandler TimedTask = new TimedTaskHandler();
    /**
     * Registering the potion is buggy. You must construct your own potion instances here, DO NOT call too early.
     */
    public static final AbstractHandler<Runnable> PotionRegistry = new AbstractHandler<>();
    /**
     * This provides some commons hooks for achievements. Like picking up, crafting, smelting some item.
     */
    public static final AchievementHandler Achievement = new AchievementHandler();
    /**
     * The so-called "wool cooking". Now you can barbecue other items, rather than only meats.
     */
    public static final BarbecueHandler Barbecue = new BarbecueHandler();
    /**
     * At client or server already launched. The entry points given by fabric loader are still too early.
     */
    public static final InitializationHandler Initialization = new InitializationHandler();
    /**
     * Hooks for world loading. Only works in single player.
     */
    @Environment(EnvType.CLIENT)
    public static final WorldLoadHandler WorldLoad = new WorldLoadHandler();
    /**
     * Hooks for chunk loading and unloading. Client/Server supported.
     */
    public static final ChunkLoadHandler ChunkLoad = new ChunkLoadHandler();
    /**
     * Stages for multiplayer connection.
     */
    public static final ConnectionHandler Connection = new ConnectionHandler();
    /**
     * Simple registry for key bindings.
     */
    @Environment(EnvType.CLIENT)
    public static final KeybindingHandler Keybinding = new KeybindingHandler();
    /**
     * This take over the armor model rendering.
     */
    @Environment(EnvType.CLIENT)
    public static final ArmorModelHandler ArmorModel = new ArmorModelHandler();
    /**
     * Write and read from the 'level.dat' file.
     */
    public static final WorldInfoHandler WorldInfo = new WorldInfoHandler();
    /**
     * Register structures, so they can generate in the world.
     */
    public static final StructureHandler Structure = new StructureHandler();
    /**
     * Take over the {@link Packet132TileEntityData} reading.
     */
    public static final TileEntityDataHandler TileEntityData = new TileEntityDataHandler();
    /**
     * Easy way to register ore generation.
     */
    public static final OreGenerationHandler OreGeneration = new OreGenerationHandler();
    /**
     * Handles structures nbt.
     */
    public static final StructureNBTHandler StructureNBT = new StructureNBTHandler();
}
